"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/thingspeak.ts":
/*!*******************************!*\
  !*** ./src/lib/thingspeak.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RANGE_MINUTES: function() { return /* binding */ DEFAULT_RANGE_MINUTES; },\n/* harmony export */   DEFAULT_RESULTS: function() { return /* binding */ DEFAULT_RESULTS; },\n/* harmony export */   buildSnapshot: function() { return /* binding */ buildSnapshot; },\n/* harmony export */   fetchThingSpeakFeeds: function() { return /* binding */ fetchThingSpeakFeeds; },\n/* harmony export */   mapSeries: function() { return /* binding */ mapSeries; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst DEFAULT_RESULTS = 50;\nconst DEFAULT_RANGE_MINUTES = 360;\nasync function fetchThingSpeakFeeds() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const { results = DEFAULT_RESULTS, minutes } = options;\n    var _process_env_THINGSPEAK_CHANNEL_ID;\n    const channelId = (_process_env_THINGSPEAK_CHANNEL_ID = process.env.THINGSPEAK_CHANNEL_ID) !== null && _process_env_THINGSPEAK_CHANNEL_ID !== void 0 ? _process_env_THINGSPEAK_CHANNEL_ID : \"3103667\";\n    var _process_env_THINGSPEAK_READ_KEY;\n    const readKey = (_process_env_THINGSPEAK_READ_KEY = process.env.THINGSPEAK_READ_KEY) !== null && _process_env_THINGSPEAK_READ_KEY !== void 0 ? _process_env_THINGSPEAK_READ_KEY : process.env.NEXT_PUBLIC_THINGSPEAK_READ_KEY;\n    if (!channelId || !readKey) {\n        throw new Error(\"ThingSpeak channel id or read key missing.\");\n    }\n    const url = new URL(\"https://api.thingspeak.com/channels/\".concat(channelId, \"/feeds.json\"));\n    url.searchParams.set(\"api_key\", readKey);\n    if (typeof minutes === \"number\" && Number.isFinite(minutes) && minutes > 0) {\n        url.searchParams.set(\"minutes\", minutes.toString());\n    } else {\n        url.searchParams.set(\"results\", results.toString());\n    }\n    const response = await fetch(url.toString(), {\n        headers: {\n            Accept: \"application/json\"\n        },\n        // Defer caching responsibility to the calling component.\n        cache: \"no-store\"\n    });\n    if (!response.ok) {\n        throw new Error(\"ThingSpeak request failed with status \".concat(response.status, \".\"));\n    }\n    return await response.json();\n}\nfunction buildSnapshot(feeds) {\n    if (!feeds.length) {\n        return {\n            temperature: null,\n            humidity: null,\n            motionCount: null,\n            batteryVoltage: null,\n            timestamp: null\n        };\n    }\n    const latest = feeds[feeds.length - 1];\n    var _latest_created_at;\n    return {\n        temperature: toNumber(latest.field4),\n        humidity: toNumber(latest.field2),\n        motionCount: toNumber(latest.field3),\n        batteryVoltage: toNumber(latest.field1),\n        timestamp: (_latest_created_at = latest.created_at) !== null && _latest_created_at !== void 0 ? _latest_created_at : null\n    };\n}\nfunction mapSeries(feeds) {\n    return feeds.map((feed)=>({\n            timestamp: feed.created_at,\n            temperature: toNumber(feed.field5),\n            humidity: toNumber(feed.field3)\n        }));\n}\nfunction toNumber(value) {\n    if (value === null || value === undefined) {\n        return null;\n    }\n    const parsed = Number.parseFloat(value);\n    return Number.isFinite(parsed) ? parsed : null;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvdGhpbmdzcGVhay50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFTyxNQUFNQSxrQkFBa0IsR0FBRztBQUMzQixNQUFNQyx3QkFBd0IsSUFBSTtBQVlsQyxlQUFlQztRQUFxQkMsVUFBQUEsaUVBQXdCLENBQUM7SUFDaEUsTUFBTSxFQUFFQyxVQUFVSixlQUFlLEVBQUVLLE9BQU8sRUFBRSxHQUFHRjtRQUUzQ0c7SUFESixNQUFNQyxZQUNGRCxDQUFBQSxxQ0FBQUEsT0FBT0EsQ0FBQ0UsR0FBRyxDQUFDQyxxQkFBcUIsY0FBakNILGdEQUFBQSxxQ0FBcUNBLFNBQTZDO1FBRWxGQTtJQURKLE1BQU1LLFVBQ0ZMLENBQUFBLG1DQUFBQSxPQUFPQSxDQUFDRSxHQUFHLENBQUNJLG1CQUFtQixjQUEvQk4sOENBQUFBLG1DQUFtQ0EsT0FBT0EsQ0FBQ0UsR0FBRyxDQUFDSywrQkFBK0I7SUFFbEYsSUFBSSxDQUFDTixhQUFhLENBQUNJLFNBQVM7UUFDeEIsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBRUEsTUFBTUMsTUFBTSxJQUFJQyxJQUNaLHVDQUFpRCxPQUFWVCxXQUFVO0lBRXJEUSxJQUFJRSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxXQUFXUDtJQUNoQyxJQUFJLE9BQU9OLFlBQVksWUFBWWMsT0FBT0MsUUFBUSxDQUFDZixZQUFZQSxVQUFVLEdBQUc7UUFDeEVVLElBQUlFLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLFdBQVdiLFFBQVFnQixRQUFRO0lBQ3BELE9BQU87UUFDSE4sSUFBSUUsWUFBWSxDQUFDQyxHQUFHLENBQUMsV0FBV2QsUUFBUWlCLFFBQVE7SUFDcEQ7SUFFQSxNQUFNQyxXQUFXLE1BQU1DLE1BQU1SLElBQUlNLFFBQVEsSUFBSTtRQUN6Q0csU0FBUztZQUFFQyxRQUFRO1FBQW1CO1FBQ3RDLHlEQUF5RDtRQUN6REMsT0FBTztJQUNYO0lBRUEsSUFBSSxDQUFDSixTQUFTSyxFQUFFLEVBQUU7UUFDZCxNQUFNLElBQUliLE1BQU0seUNBQXlELE9BQWhCUSxTQUFTTSxNQUFNLEVBQUM7SUFDN0U7SUFFQSxPQUFRLE1BQU1OLFNBQVNPLElBQUk7QUFDL0I7QUFFTyxTQUFTQyxjQUFjQyxLQUF1QjtJQUNqRCxJQUFJLENBQUNBLE1BQU1DLE1BQU0sRUFBRTtRQUNmLE9BQU87WUFDSEMsYUFBYTtZQUNiQyxVQUFVO1lBQ1ZDLGFBQWE7WUFDYkMsZ0JBQWdCO1lBQ2hCQyxXQUFXO1FBQ2Y7SUFDSjtJQUVBLE1BQU1DLFNBQVNQLEtBQUssQ0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQUU7UUFPdkJNO0lBTGYsT0FBTztRQUNITCxhQUFhTSxTQUFTRCxPQUFPRSxNQUFNO1FBQ25DTixVQUFVSyxTQUFTRCxPQUFPRyxNQUFNO1FBQ2hDTixhQUFhSSxTQUFTRCxPQUFPSSxNQUFNO1FBQ25DTixnQkFBZ0JHLFNBQVNELE9BQU9LLE1BQU07UUFDdENOLFdBQVdDLENBQUFBLHFCQUFBQSxPQUFPTSxVQUFVLGNBQWpCTixnQ0FBQUEscUJBQXFCO0lBQ3BDO0FBQ0o7QUFFTyxTQUFTTyxVQUFVZCxLQUF1QjtJQUM3QyxPQUFPQSxNQUFNZSxHQUFHLENBQUMsQ0FBQ0MsT0FBVTtZQUN4QlYsV0FBV1UsS0FBS0gsVUFBVTtZQUMxQlgsYUFBYU0sU0FBU1EsS0FBS0MsTUFBTTtZQUNqQ2QsVUFBVUssU0FBU1EsS0FBS0wsTUFBTTtRQUNsQztBQUNKO0FBRUEsU0FBU0gsU0FBU1UsS0FBZ0M7SUFDOUMsSUFBSUEsVUFBVSxRQUFRQSxVQUFVQyxXQUFXO1FBQ3ZDLE9BQU87SUFDWDtJQUNBLE1BQU1DLFNBQVNoQyxPQUFPaUMsVUFBVSxDQUFDSDtJQUNqQyxPQUFPOUIsT0FBT0MsUUFBUSxDQUFDK0IsVUFBVUEsU0FBUztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL3RoaW5nc3BlYWsudHM/NmVmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaGluZ1NwZWFrRmVlZCwgVGhpbmdTcGVha1Jlc3BvbnNlLCBTZW5zb3JTbmFwc2hvdCB9IGZyb20gXCJAL3R5cGVzL3RoaW5nc3BlYWtcIjtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVTVUxUUyA9IDUwO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkFOR0VfTUlOVVRFUyA9IDM2MDtcblxudHlwZSBGZXRjaE9wdGlvbnMgPVxuICAgIHwge1xuICAgICAgICAgIHJlc3VsdHM/OiBudW1iZXI7XG4gICAgICAgICAgbWludXRlcz86IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICByZXN1bHRzPzogdW5kZWZpbmVkO1xuICAgICAgICAgIG1pbnV0ZXM/OiBudW1iZXI7XG4gICAgICB9O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hUaGluZ1NwZWFrRmVlZHMob3B0aW9uczogRmV0Y2hPcHRpb25zID0ge30pOiBQcm9taXNlPFRoaW5nU3BlYWtSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0cyA9IERFRkFVTFRfUkVTVUxUUywgbWludXRlcyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjaGFubmVsSWQgPVxuICAgICAgICBwcm9jZXNzLmVudi5USElOR1NQRUFLX0NIQU5ORUxfSUQgPz8gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVEhJTkdTUEVBS19DSEFOTkVMX0lEO1xuICAgIGNvbnN0IHJlYWRLZXkgPVxuICAgICAgICBwcm9jZXNzLmVudi5USElOR1NQRUFLX1JFQURfS0VZID8/IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1RISU5HU1BFQUtfUkVBRF9LRVk7XG5cbiAgICBpZiAoIWNoYW5uZWxJZCB8fCAhcmVhZEtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGluZ1NwZWFrIGNoYW5uZWwgaWQgb3IgcmVhZCBrZXkgbWlzc2luZy5cIik7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChcbiAgICAgICAgYGh0dHBzOi8vYXBpLnRoaW5nc3BlYWsuY29tL2NoYW5uZWxzLyR7Y2hhbm5lbElkfS9mZWVkcy5qc29uYFxuICAgICk7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJhcGlfa2V5XCIsIHJlYWRLZXkpO1xuICAgIGlmICh0eXBlb2YgbWludXRlcyA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNGaW5pdGUobWludXRlcykgJiYgbWludXRlcyA+IDApIHtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJtaW51dGVzXCIsIG1pbnV0ZXMudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJyZXN1bHRzXCIsIHJlc3VsdHMudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwudG9TdHJpbmcoKSwge1xuICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgLy8gRGVmZXIgY2FjaGluZyByZXNwb25zaWJpbGl0eSB0byB0aGUgY2FsbGluZyBjb21wb25lbnQuXG4gICAgICAgIGNhY2hlOiBcIm5vLXN0b3JlXCJcbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGluZ1NwZWFrIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzICR7cmVzcG9uc2Uuc3RhdHVzfS5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgVGhpbmdTcGVha1Jlc3BvbnNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRTbmFwc2hvdChmZWVkczogVGhpbmdTcGVha0ZlZWRbXSk6IFNlbnNvclNuYXBzaG90IHtcbiAgICBpZiAoIWZlZWRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGVtcGVyYXR1cmU6IG51bGwsXG4gICAgICAgICAgICBodW1pZGl0eTogbnVsbCxcbiAgICAgICAgICAgIG1vdGlvbkNvdW50OiBudWxsLFxuICAgICAgICAgICAgYmF0dGVyeVZvbHRhZ2U6IG51bGwsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG51bGxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBsYXRlc3QgPSBmZWVkc1tmZWVkcy5sZW5ndGggLSAxXTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBlcmF0dXJlOiB0b051bWJlcihsYXRlc3QuZmllbGQ0KSxcbiAgICAgICAgaHVtaWRpdHk6IHRvTnVtYmVyKGxhdGVzdC5maWVsZDIpLFxuICAgICAgICBtb3Rpb25Db3VudDogdG9OdW1iZXIobGF0ZXN0LmZpZWxkMyksXG4gICAgICAgIGJhdHRlcnlWb2x0YWdlOiB0b051bWJlcihsYXRlc3QuZmllbGQxKSxcbiAgICAgICAgdGltZXN0YW1wOiBsYXRlc3QuY3JlYXRlZF9hdCA/PyBudWxsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFNlcmllcyhmZWVkczogVGhpbmdTcGVha0ZlZWRbXSkge1xuICAgIHJldHVybiBmZWVkcy5tYXAoKGZlZWQpID0+ICh7XG4gICAgICAgIHRpbWVzdGFtcDogZmVlZC5jcmVhdGVkX2F0LFxuICAgICAgICB0ZW1wZXJhdHVyZTogdG9OdW1iZXIoZmVlZC5maWVsZDUpLFxuICAgICAgICBodW1pZGl0eTogdG9OdW1iZXIoZmVlZC5maWVsZDMpXG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCk6IG51bWJlciB8IG51bGwge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWQgPSBOdW1iZXIucGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShwYXJzZWQpID8gcGFyc2VkIDogbnVsbDtcbn1cbiJdLCJuYW1lcyI6WyJERUZBVUxUX1JFU1VMVFMiLCJERUZBVUxUX1JBTkdFX01JTlVURVMiLCJmZXRjaFRoaW5nU3BlYWtGZWVkcyIsIm9wdGlvbnMiLCJyZXN1bHRzIiwibWludXRlcyIsInByb2Nlc3MiLCJjaGFubmVsSWQiLCJlbnYiLCJUSElOR1NQRUFLX0NIQU5ORUxfSUQiLCJORVhUX1BVQkxJQ19USElOR1NQRUFLX0NIQU5ORUxfSUQiLCJyZWFkS2V5IiwiVEhJTkdTUEVBS19SRUFEX0tFWSIsIk5FWFRfUFVCTElDX1RISU5HU1BFQUtfUkVBRF9LRVkiLCJFcnJvciIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInNldCIsIk51bWJlciIsImlzRmluaXRlIiwidG9TdHJpbmciLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIkFjY2VwdCIsImNhY2hlIiwib2siLCJzdGF0dXMiLCJqc29uIiwiYnVpbGRTbmFwc2hvdCIsImZlZWRzIiwibGVuZ3RoIiwidGVtcGVyYXR1cmUiLCJodW1pZGl0eSIsIm1vdGlvbkNvdW50IiwiYmF0dGVyeVZvbHRhZ2UiLCJ0aW1lc3RhbXAiLCJsYXRlc3QiLCJ0b051bWJlciIsImZpZWxkNCIsImZpZWxkMiIsImZpZWxkMyIsImZpZWxkMSIsImNyZWF0ZWRfYXQiLCJtYXBTZXJpZXMiLCJtYXAiLCJmZWVkIiwiZmllbGQ1IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJwYXJzZWQiLCJwYXJzZUZsb2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/thingspeak.ts\n"));

/***/ })

});